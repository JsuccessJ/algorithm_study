# 지도가 주어질 때, 지도는 왼쪽 가장 위쪽의 좌표가 (1, 1)이고 오른쪽 가장 아래쪽의 좌표가 (4, 4)이다. 
# 각 셀의 숫자는 움직이는데 드는 시간이다. 즉, (1, 1)에서 택시가 이동하는데 드는 시간은 6이다. 
# 여러분은 (1, 1)의 위치에 있고, 목적지는 (4, 4)에 있다. 즉, (1, 1)에서 (4, 4)로 이동 해야 한다.

# 그런데 여러분은 다음과 같은 방식으로 움직인다.  
# • 오른쪽이나 아래쪽으로만 이동할 수 있다.
# • 왼쪽, 위쪽, 대각선 이동은 할 수 없다. 

# 여러분이 목적지에 빨리 가기 위해서는 경로상 걸리는 시간의 합이 최소가 되어야 한다. 
# 여러분이 해야하는 일은 출발점에서 도착점까지의 여러 경로 중 가장 빨리 도착 할 수 있는 시간을 구하는 것이다.
 
# Input Format 
# 첫 줄에는 지도의 크기 n*m(<=100)이 들어온다.
# 그 다음 n 줄에는 각 셀의 시간이 들어온다. 각 줄은 해당 행의 시간으로 구성된다.

# Output Format 
# (1,1)에서 (n,m) 까지 여러 경로 중 가장 빨리 도착 할 수 있는 시간을 출력한다.

# Sample Input
# 4 4
# 6 7 12 5
# 5 3 11 18
# 7 17 3 3
# 8 10 14 9

# Sample Output
# 40

def matrixPath(n, m):
    c = [[float('inf')] * (m+1) for _ in range(n+1)]
    c[0][1] = c[1][0] = 0
    for i in range(1, n+1):
        for j in range(1, m+1):
            c[i][j] = matrix[i-1][j-1] + min(c[i-1][j], c[i][j-1])
    return c[n][m]

n, m = map(int, input().split())
matrix = [list(map(int, input().split())) for _ in range(n)]
print(matrixPath(n, m))
